name: Continous Intergation

on:

  # Triggered on each code push to the master branch
  push:
    branches: [ master ]

  # Triggered on each code pull request to the master branch
  pull_request:
    branches: [ master ]
  
  # Manual trigger
  workflow_dispatch:

env:
  # The name of the artifact holding the production build code
  BUILD_Artifact: "build-${{ github.run_id }}-${{ github.run_attempt }}.zip"
  TEST_Artifact: "test-${{ github.run_id }}-${{ github.run_attempt }}.zip
   # DockerHub Repository image new unique name
  Production_IMG: "alysab3/ci-cd-pipeline:${{ github.run_id }}-${{ github.run_attempt }}"
  
  # DockerHub access token
  DOCKERHUB_TOKEN: "ea207177-1ada-42a6-9d25-3a9cdd308a76"


jobs:
  build:

    name: Building

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./website
    

    steps:
      
      # Copying the code from the repos to the runner machine
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Installing the dependecies in the node_modules folder
      - name: Install Node Modules
        run: npm install

      # Compile and start the applciation
      - name: Build
        run: npm run build --prod

      # Moving the Dockerfile to the arficats folder as it will be needed in the containerization job
      - name: Moving Dockerfile
        run: cp ../infrastructure/docker/production/Dockerfile dist/

      - name: Zipping the Build artifacts
        run: cd dist && zip BUILD_Artifact * -r
      - run: ls -la

      
      # Uploading the production build artifacts
      - name: Upload Artications
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_Artifact }}
          path: website/dist/BUILD_Artifact
          if-no-files-found: error
      

  unit_tests:

    name: Unit Testing

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./website


    steps:
     # Copying the code from the repos to the runner machine
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Installing the dependecies in the node_modules folder
      - name: Install Node Modules
        run: npm install

      - name: Test
        run: npm run test-headless

  lint:

    name: Linting

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./website
    

    steps:
     # Copying the code from the repos to the runner machine
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Installing the dependecies in the node_modules folder
      - name: Install Node Modules
        run: npm install

      - name: Lint
        run: npm run lint

        


  # containerize:

  #   runs-on: ubuntu-latest
    
  #   # Specifying the dependency of this (containerize) job on the build job
  #   needs: build

  #   steps:
  #     # Downloading the production build artifacts
  #     - name: Download application
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: ${{ env.BUILD_Artifact }}

  #     # Compiling the Dockerfile to a docker image
  #     - name: Builing Docker Image
  #       run: docker build . --file Dockerfile --tag ${{ env.Production_IMG }}

  #     - name: Login to Docker
  #       run: echo -n ${{ env.DOCKERHUB_TOKEN }} | sudo docker login -u alysab3 --password-stdin
        
  #     - name: Pushing the image to DockerHub
  #       run: docker push ${{ env.Production_IMG }}
        
  #     - name: Logout from Docker 
  #       run: docker logout


  publish:
    
    name: Publish Artifacts

    runs-on: ubuntu-latest

    # Specifying the dependency of this (publish) job
    needs: [ build, unit_tests, lint ]

    steps:
      # Downloading the production build artifacts
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BUILD_Artifact }}

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v1

      - run: jfrog --version