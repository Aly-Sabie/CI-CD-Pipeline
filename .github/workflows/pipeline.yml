name: Continous Intergation

on:

  # Triggered on each code push to the master branch
  push:
    branches: [ master ]

  # Triggered on each code pull request to the master branch
  pull_request:
    branches: [ master ]
  
  # Manual trigger
  workflow_dispatch:

env:
  # The name of the artifact holding the production build code
  BUILD_Artifact: "build-${{ github.run_id }}-${{ github.run_attempt }}.zip"
  TEST_Artifact: "test-${{ github.run_id }}-${{ github.run_attempt }}.html"
   # DockerHub Repository image new unique name
  Production_IMG: "alysab3/ci-cd-pipeline:${{ github.run_id }}-${{ github.run_attempt }}"
  
  # Access tokens
  DOCKERHUB_TOKEN: "ea207177-1ada-42a6-9d25-3a9cdd308a76"
  JFROG_TOKEN: "eyJ2ZXIiOiIyIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYiLCJraWQiOiIyTks4UGZjWWZnVFhic1ZCdnpZZ2p3N3hIbkIzUXVBbjYxem4tb05RVl9NIn0.eyJleHQiOiJ7XCJyZXZvY2FibGVcIjpcInRydWVcIn0iLCJzdWIiOiJqZmFjQDAxZzI4ejN3N2swczd5MDVjZWVzcXMwcjRyXC91c2Vyc1wvYWx5c2FiMyIsInNjcCI6ImFwcGxpZWQtcGVybWlzc2lvbnNcL2FkbWluIiwiYXVkIjpbImpmcnRAKiIsImpmYWNAKiIsImpmZXZ0QCoiLCJqZm1kQCoiLCJqZmNvbkAqIl0sImlzcyI6ImpmZmVAMDAwIiwiZXhwIjoxNjU0NTA4NjYyLCJpYXQiOjE2NTE5MTY2NjIsImp0aSI6IjVlMDRiNDc3LWJlYTMtNDk0YS05OGYzLTJkZmZkMmMwMGY1YSJ9.TdoeHl9cmFIqEzlVZy1TlEP8L6yhbsXJ28AVcP7JYV1jXe3l5C6BD5N3NaW788lmizswMIJPH-XOVjwIkEgITKaQwUEpyBqp9kI51OvBcT4mHRaij7e4fDFGlQHBrD5qSR893p-oEQgGX1l5hqQucMEJRPLfvKpcGPp-RKlmyxr-j4CK1Nwn6iLMNpT9XtHkP1Q6jRs-TxjISKq1g5kWf2B789XQtmlocE6JPhHHyLjBd0Gx56fxFDcG89ISepZTB0PHsxlExgcMbCGKi-kZklp9OpeYBjTQEaTzGXG0MxTawqgucNBdsVk_CrpvPUKfmXaCAVAvGWKoXaaJ9SWymQ"


jobs:
  build:

    name: Building

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./website
    

    steps:
      
      # Copying the code from the repos to the runner machine
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Installing the dependecies in the node_modules folder
      - name: Install Node Modules
        run: npm install

      # Compile and start the applciation
      - name: Build
        run: npm run build --prod

      # Moving the Dockerfile to the arficats folder as it will be needed in the containerization job
      - name: Moving Dockerfile
        run: cp ../infrastructure/docker/production/Dockerfile dist/

      - name: Zipping the Build artifacts
        run: cd dist && zip ${{ env.BUILD_Artifact }} * -r
      - run: ls -la

      
      # Uploading the production build artifacts
      - name: Upload Artications
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_Artifact }}
          path: website/dist/${{ env.BUILD_Artifact }}
          if-no-files-found: error
      

  unit_tests:

    name: Unit Testing

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./website


    steps:
     # Copying the code from the repos to the runner machine
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Installing the dependecies in the node_modules folder
      - name: Install Node Modules
        run: npm install

      - name: Test
        run: npm run test-headless
      
      - name: Rename the results file
        run: mv test/unit-test-result.html ${{ env.TEST_Artifact }}

      # Uploading the Test results artifacts
      - name: Upload Artications
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TEST_Artifact }}
          path: website/${{ env.TEST_Artifact }}
          if-no-files-found: error

  lint:

    name: Linting

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./website
    

    steps:
     # Copying the code from the repos to the runner machine
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Installing the dependecies in the node_modules folder
      - name: Install Node Modules
        run: npm install

      - name: Lint
        run: npm run lint

        


  containerize:

    runs-on: ubuntu-latest

    # Specifying the dependency of this (containerize) job on the build job
    needs: [ build, unit_tests, lint ]

    steps:
      # Downloading the production build artifacts
      - name: Download application
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BUILD_Artifact }}

      # Unzipping the folder containing the generated build artifacts
      - name: Unzip the Build artifact package
        run: unzip ${{ env.BUILD_Artifact }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: alysab3
          password: ${{ env.DOCKERHUB_TOKEN }}

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # Building the docker image and pushing it to DockerHub 
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.Production_IMG }}


  publish:
    
    name: Publish Artifacts

    runs-on: ubuntu-latest

    # Specifying the dependency of this (publish) job
    needs: [ build, unit_tests, lint ]

    steps:
      # Downloading the production build artifacts
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BUILD_Artifact }}

      - name: Download Test results
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.TEST_Artifact }}
      - run: ls

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v1

      - name: Configuring JFrog account
        run: jfrog config add alysab3artifacts --artifactory-url="https://alysab3artifacts.jfrog.io/artifactory/" --access-token="${{ env.JFROG_TOKEN }}" --interactive=false

      - name: Uploading the build artifact
        run: jfrog rt u ${{ env.BUILD_Artifact }} ci-cd-pipeline-npm

      - name: Uploading the test results
        run: jfrog rt u ${{ env.TEST_Artifact }} ci-cd-pipeline-npm




  deploy:

    runs-on: ubuntu-latest
    needs: build

    steps:

      # Downloading the production build artifacts
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BUILD_Artifact }}

      - run: unzip ${{ env.BUILD_Artifact }}
      - name: Deploy Build artifacts
        uses: appleboy/scp-action@master
        with:
          host: alyysab31.eastus.cloudapp.azure.com
          username: azureuser
          password: "P@ssw0rdP@ssw0rd"
          port: 22
          source: .
          target: "/var/www/html/"
        
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: alyysab31.eastus.cloudapp.azure.com
          username: azureuser
          password: "P@ssw0rdP@ssw0rd"
          port: 22
          script: |
            ls;
            ls /var/www/html/;




  # deploy:  # A dummy deployment job

  #   runs-on: ubuntu-latest

  #   steps:

  #   # Login to Azure account
  #   - name: Login to Azure
  #     uses: azure/login@v1
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}
    
  #   # Downloading the production build artifacts
  #   - name: Download application
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: ${{ env.BUILD_Artifact }}

  #   - name: deploy to azure web apps
  #     uses: azure/webapps-deploy@v2
  #     with: 
  #       app-name: 'alyyysab3-site'
  #       publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_C095F0A174164699BFC0481E0709F1C9 }}
  #       package: .

    # - name: Deploy
    #   uses: azure/CLI@v1
    #   with:
    #     inlineScript: |
    #         az network vnet create \
    #         --name myVNet \
    #         --resource-group CD-rg \
    #         --subnet-name default
              
