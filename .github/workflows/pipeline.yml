name: Continous Intergation

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_Artifact: "build"  # The name of the artifact holding the production build code
  TEST_Artifact: "test"
  CONTAINER_IMG: "image"

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

      # Copying the code from the repos to the runner machine
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Installing Node.js on he runner machine
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 12.x
          cache: 'npm'

      # Installing the dependecies in the node_modules folder
      - name: Install Node Modules
        run: npm install

      # Compile and start the applciation
      - name: Build
        run: npm run build --prod

      # Moving the Dockerfile to the arficats folder as it will be needed in the containerization job
      - name: Moving Dockerfile
        run: cp Dockerfile dist/

      # Uploading the production build artifacts
      - name: Upload Artications
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_Artifact }}
          path: dist/
          if-no-files-found: error

      # - name: Test
      #   run: npm run test-headless
      
      # - name: Lint
      #   run: npm run lint

      # - run: ls -la


  containerize:

    runs-on: ubuntu-latest
    
    # Specifying the dependency of this (containerize) job on the build job
    needs: build

    steps:
      # Downloading the production build artifacts
      - name: Download application
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BUILD_Artifact }}

      # Compiling the Dockerfile to a docker image
      - name: Builing Docker Image
        run: docker build . --file Dockerfile --tag app-img:latest

      - run: docker images


  deploy:  # A dummy deployment job

    runs-on: ubuntu-latest
    
    # Specifying the dependency of this (containerize) job on the build job
    needs: build

    steps:

    # Login to Azure account
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # Downloading the production build artifacts
    - name: Download application
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.BUILD_Artifact }}


    - run: ls -la

    - name: deploy to azure web apps
      uses: azure/webapps-deploy@v2
      with: 
        app-name: 'alyyysab3-site'
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_C095F0A174164699BFC0481E0709F1C9 }}
        package: .

    # - name: Deploy
    #   uses: azure/CLI@v1
    #   with:
    #     inlineScript: |
    #         az network vnet create \
    #         --name myVNet \
    #         --resource-group CD-rg \
    #         --subnet-name default
              